{"version":"0.2.0","body":"function main(workbook: ExcelScript.Workbook, week: WeekData) {\n  if (!week) {\n    console.log(\"ERROR: week is undefined!\");\n    return false;\n  }\n  if (!week.id) {\n    console.log(\"ERROR: week.id is undefined!\");\n    return false\n  }\n  console.log(`INFO: processing_ ${week.id}`)\n\n  if (!week.year) {\n    console.log(`INFO: week.year not provided! use year ${DEFAULT_YEAR}`);\n    week.year = DEFAULT_YEAR\n  }\n  \n  const sheetName = `Resources ${week.year}`\n\n  const resSheet = workbook.getWorksheet(sheetName)\n  if (!resSheet) {\n    console.log(`ERROR: sheet '${sheetName}' not found!`);\n    return false;\n  }\n\n  const week_table = resSheet.getTable(week.id)\n  if (!week_table) {\n    console.log(`ERROR: table not found for key: ${week.id}`);\n    return false;\n  }\n\n  const resCount = week_table.getRowCount()\n  console.log(`INFO: resource #: ${resCount}`)\n\n  const weekRange = week_table.getRange()\n\n  const startIndex = weekRange.getRowIndex() + ROW_OFFSET_FROM_SHEET_TOP\n  const resStartAddress = `B${startIndex}:B${resCount+startIndex+1}`\n  \n  console.log(\n    `INFO: start row #: ${startIndex} - address ${resStartAddress}`)\n\n  const resRange = resSheet.getRange(resStartAddress)\n\n  const resValues = resRange.getValues() as string[][]\n  //const weekValues = weekRange.getValues() as string[][]\n  \n  week.resources.forEach(res => {\n    if (!res.mail) {\n      console.log('ERROR: resource mail is undefined!');\n      return;\n    }\n\n    const resIndex = getResIndex(resValues, res)\n    if (resIndex < 0) {\n      console.log(`WARN: resource ${res.mail} not found in sheet!`)\n      return\n    }\n\n    const rowIndex = resIndex + ROW_OFFSET_FROM_TABLE_TOP\n\n    console.log(`INFO: resource ${res.mail} found at row: ${rowIndex}`)\n    //console.log(`TRACE: resource ${JSON.stringify(res)}`)\n\n    if (res.overtimes!==undefined && res.overtimes!==null) {\n      setHoursValue( weekRange.getCell(rowIndex, 0), res, 'overtimes' )\n    }\n    if (res.hoursoff!==undefined && res.hoursoff!==null) {\n      setHoursValue( weekRange.getCell(rowIndex, 1), res, 'hoursoff' )\n    }\n    if (res.absences!==undefined && res.absences!==null) {\n      setHoursValue( weekRange.getCell(rowIndex, 2), res, 'absences' )\n    }\n  })\n\n  return true\n}\n\nconst ROW_OFFSET_FROM_TABLE_TOP = 1\nconst ROW_OFFSET_FROM_SHEET_TOP = 2\nconst DEFAULT_YEAR = 2021\n\nconst setHoursValue = ( cell:ExcelScript.Range, res:Resource, property:keyof Resource ) => {\n  const prevValue = cell.getValue()\n  const newValue = res[property]\n\n  \n  if( typeof(prevValue)==='number' ) {\n    if (prevValue === newValue) {\n      console.log(`INFO: update '${property}' with value  ${prevValue} at ${cell.getAddress()} skipped! no change detected`)\n      return false\n    }\n    if ( !res.forceUpdate && prevValue !== newValue ) {\n      console.log( `WARN: already present '${property}' with value '${prevValue}' at ${cell.getAddress()} - update to ${newValue} skipped!`)\n      return false\n    }\n  }\n  \n  // console.log(`previous '${property}' value: '${prevValue}' type: '${typeof prevValue}' null:${prevValue === null} undefined: ${prevValue === undefined}` )\n  console.log(`INFO: set '${property}' to value '${newValue}' at ${cell.getAddress()}`)\n  cell.setValue( newValue )\n  return true\n}\n\nconst getResIndex = (range: string[][], res: Resource) =>\n  range\n    //.map(row => {console.log(row); return row; })\n    .map(row => row[0])\n    .map(n => n.trim())\n    .map(n => n.toUpperCase())\n    .findIndex(n => n === res.mail.toUpperCase())\n\n// @Deprecated\nconst getResIndexByName = (range: string[][], name: string) =>\n  range\n    //.map(row => {console.log(row); return row; })\n    .map(row => row[0])\n    .map(n => n.replace(/\\s/g, ''))\n    .map(n => n.toUpperCase())\n    .findIndex(n => n === name)\n\n// @Deprecated\nfunction getResName(res: Resource) {\n  if (!res.name) {\n    console.log(\"resource 'name' is undefined\");\n    return;\n  }\n\n  const [name, surname] = res.name.trim().toUpperCase().split(' ')\n  if (!name || !surname) {\n    console.log(`resource 'name' ${res.name} is not valid!`)\n    return\n  }\n\n  return `${surname}${name}`\n}\n\ninterface Resource {\n  name: string,\n  mail: string,\n\n  forceUpdate?:boolean\n  overtimes?: number,\n  hoursoff?: number,\n  absences?: number\n}\n\ninterface WeekData {\n  id: string,\n  year?: number\n  resources: Array<Resource>\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[{\"name\":\"week\",\"index\":0}],\"parameterSchema\":{\"type\":\"object\",\"required\":[\"week\"],\"properties\":{\"week\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"year\":{\"type\":\"number\"},\"resources\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"mail\":{\"type\":\"string\"},\"forceUpdate\":{\"type\":\"boolean\"},\"overtimes\":{\"type\":\"number\"},\"hoursoff\":{\"type\":\"number\"},\"absences\":{\"type\":\"number\"}}}}}}}},\"returnSchema\":{\"type\":\"object\",\"properties\":{\"result\":{\"type\":\"boolean\"}}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}